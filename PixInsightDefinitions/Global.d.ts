/* declare function Number(value: any): number; */
/* declare function Object(value: any): Object; */
declare function cerr(text: string): void;
declare function cflush(): void;
declare function cout(text: string): void;
declare function decodeURI(encodedURI: string): string;
declare function decodeURIComponent(encodedURI: string): string;
declare function encodeURI(URI: string): string;
declare function encodeURIComponent(uriComp: string): string;
declare function eval(s: string): Object;
declare function eval(s: string, Object?: Object): Object;
declare function format(fmt: string): string;
declare function format(...value: any[]): string;
declare function gc(): void;
declare function gc(hardGC?: boolean /* true */): void;
declare function gcBytes(): number;
declare function getEnvironmentVariable(varName: string): string;
declare function isFinite(n: number): boolean;
declare function isNaN(value: any): boolean;
declare function loadResource(filePath: string): boolean;
declare function loadResource(filePath: string, rootPath?: string): boolean;
declare function matchesWildSpecification(what: string, wildPattern: string): boolean;
declare function msleep(milliseconds: number): void;
declare function parseFloat(s: string): number;
declare function parseInt(s: string): number;
declare function parseInt(s: string, radix?: number): number;
declare function processEvents(): void;
declare function processEvents(excludeUserInputEvents?: boolean /* false */, iterations?: number /* 1 */): void;
declare function replaceEnvironmentVariables(s: string): string;
declare function searchDirectory(dirPath: string): Array<any>;
declare function searchDirectory(dirPath: string, recursive?: boolean /* false */): Array<any>;
declare function sleep(seconds: number): void;
declare function systemOffsetFromUTC(): number;
declare function systemOffsetFromUTC(date?: Date | string): number;
declare function unloadResource(filePath: string): boolean;
declare function unloadResource(filePath: string, rootPath?: string): boolean;
declare var NaN: number;
declare var Infinity: number;
declare var corePlatform: string;
declare var coreId: string;
declare var coreLanguage: string;
declare var coreVersionMajor: number;
declare var coreVersionMinor: number;
declare var coreVersionRelease: number;
declare var coreVersionRevision: number;
declare var coreVersionBuild: number;
declare var coreVersionBeta: number;
declare var coreVersionLE: boolean;
declare var coreVersionCodename: string;
declare var coreFilePath: string;
declare var coreDirPath: string;
declare var coreBaseDirPath: string;
declare var coreAppDirPath: string;
declare var coreBinDirPath: string;
declare var coreEtcDirPath: string;
declare var coreRscDirPath: string;
declare var coreIncludeDirPath: string;
declare var coreSrcDirPath: string;
declare var coreLibDirPath: string;
declare var coreLibraryDirPath: string;
declare var coreDocDirPath: string;
declare var coreColorDirPath: string;
declare var pclId: string;
declare var pclVersionMajor: number;
declare var pclVersionMinor: number;
declare var pclVersionRelease: number;
declare var pclVersionBuild: number;
declare var pclVersionBeta: number;
declare var jsVersion: number;
declare var jsStrictMode: boolean;
declare var jsAbortable: boolean;
declare var jsAutoGC: boolean;
declare var jsArguments: Array<any>;
declare var jsScriptResult: boolean;
declare var console: Console;
declare var EMath: Math;
declare var count: number;
declare var arr: Array<any>;